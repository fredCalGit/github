import Head from "next/head";

import Cards from "@/components/Cards/Cards";
import { Container } from "@chakra-ui/react";
import Navbar from "@/components/Navbar/Navbar";
import { gql, useQuery } from "@apollo/client";
import { useEffect, useState } from "react";
import { User } from "@/types";

export default function Home() {
  const [queryString, setQueryString] = useState("");
  const [queryVariables, setQueryVariables] = useState<QueryVariables>({
    query: "",
    type: "USER",
    after: null,
    first: 20,
  });

  const { data, loading, error } = useQuery<QueryResult>(FETCH_USERS, {
    variables: queryVariables,
  });
  const [users, setUsers] = useState<User[] | null>(null);

  useEffect(() => {
    if (!data || error || loading) return;

    const serializedData = data?.search?.edges?.map((item) => {
      const { node } = item;
      return {
        avatarUrl: node.avatarUrl,
        bio: node.bio,
        company: node.company,
        createdAt: node.createdAt,
        email: node.email,
        id: node.id,
        location: node.location,
        name: node.name,
        login: node.login,
        repositories: node.repositories,
      };
    });
    setUsers(serializedData);
  }, [loading, error, data]);

  useEffect(() => {
    setQueryVariables({
      query: queryString,
      type: "USER",
      after: null,
      first: 20,
    });
  }, [queryString]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
      </Head>
      <main>
        <Container maxW='100vw' minHeight='100vh' p='0' bg='blue.500' m='0'>
          <Navbar setQueryString={setQueryString} />
          <Cards users={users} isLoading={loading} />
        </Container>
      </main>
    </>
  );
}

type QueryResult = {
  search: {
    edges: {
      cursor: string;
      node: User;
    }[];
  };
};

type QueryVariables = {
  query: string;
  type: "USER";
  after: string | null;
  first: number;
};

const FETCH_USERS = gql`
  query ExampleQuery(
    $query: String!
    $type: SearchType!
    $first: Int
    $after: String
  ) {
    search(query: $query, type: $type, first: $first, after: $after) {
      edges {
        cursor
        node {
          ... on User {
            avatarUrl
            bio
            company
            createdAt
            email
            id
            location
            name
            login
            repositories {
              totalCount
            }
          }
        }
      }
    }
  }
`;
